/**************************************************************************
 * Copyright (c) 2002-2009, Tobias Ringstr√∂m <tobias@ringis.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    - Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
/** \file Building.dox
  * \brief Building GyrOS.
  */

/** \page building Building GyrOS

GyrOS is easy to build, and can be built using most build systems,
such as make, SCons or an integrated development environment like
Eclipse.  It can be built as a library to be used by multiple
applications, or it can be copied directly into the application build
structure, depending on what suits the application best.

In order to build and application using GyrOS, you will need a
development platform for your target microcontroller, including a
standard C library, and startup code to initialize your
microcontroller.

While the GyrOS core is 100% standard C, the target ports all contain
some assembly files and/or compiler specific C code.  All current
target ports are for the GNU toolchain, which is Open Source and is
available for a vast number of CPU:s, and runs on all major host
platforms.  The target specific code is on the other hand very little
code, so it's not too hard to port to another development platform if
needed.

\section building_app Building a real application using SCons

Building a real application using SCons is very easy.  Let's say that
we want to build an application called blinky.  A convenient directory
structure for an application is to put gyros in a top level directory,
and the application code in another top level directory, which we will
call \c src in this example.  We can initialize the src directory by
copying the example directory, and then edit the SConstruct file to
fix the CPPPATH and the path to the SConscript file.

\section building_other Building using another build system

For the rest of this section, let's assume that the GyrOS top level
directory is \c $GYROS.  This is the directory containing the
directories \c doc, \c include, \c src, \c targets and the file \c
LICENSE.  Let's also assume that we're building for an STR912 CPU.
The port for this CPU is called \c str91x.  If you're building for
another port, just replace \c str91x with the name of your port.

\subsection building_other_includepath Include paths

The build system must configure the search path to find both the core
include files and the port specific include files.  Since all GyrOS
include files (external and internal) are prefixed by \c gyros/, the
build system must add the directory containing the \c gyros directory,
and not the \c gyros directory itself.  For our example, it means that
the following directories should be added:

- \c $GYROS/include
- \c $GYROS/target/<em>str91x</em>/include

Here's an example of the command line when building using a GCC
cross-compiler:

\verbatim
arm-elf-gcc -I $GYROS/include -I $GYROS/target/str91x/include -c file.c
\endverbatim

\subsection building_other_config Configuration file

GyrOS expects to find a configuration include file, included by GyrOS
internally using the name \c gyros-config.h.  A template for this
configuration file is available in the example directory of your
target port.

\subsection building_other_srcs Source files

The build system must build all files in the \c src directory and
below, and also the target specific files, which in the case of the
str91x target means all source files in the \c target/str91x
directory.  The port may also require common architecture code.  The
str91x target is an ARM target, so all source files in the \c
arch/arm must be built as well.

*/
