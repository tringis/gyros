/**************************************************************************
 * Copyright (c) 2002-2012, Tobias Ringstr√∂m <tobias@ringis.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    - Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
/** \file Mainpage.dox
  * \brief Main page documentation.
  */

/** \mainpage GyrOS Documentation

GyrOS is an open source portable real time operating system (RTOS)
with an easy to use C API.  It is easy to port to new architectures
and microcontrollers, partly because it is written in C, but mostly
because the bits that must be ported are few and clearly separated
from the core.

\section features Features
- Permissive BSD-style \subpage license "license" allowing for both
  commercial and non-commercial use.
- Easy to \ref porting "port" to new architectures and microcontrollers.
- Preemtive \ref task_group "multitasking" with arbitrary number of
  priority values.  Round-robin scheduling within tasks of the same
  priority.
- Small memory footprint (both code and data).  Individual features can
  be disabled to minimize size.  Using an ARM target, a complete
  application uses from 2236 bytes ROM and 148 bytes RAM.  A task uses
  108 bytes RAM (plus stack), and a mutex uses only 16 bytes RAM.
- Low power consumption using dynamic timer interrupts that prevents
  unneccessary wakeups from low power modes.
- \ref error_group and \ref debug_group "debugging support" to catch
  common usage errors and see current task status.
- \ref hook_group to add custom code to context switches and interrupt
  handlers.
- \ref trace_group to study real time behavior of tasks and synchronization
  object activities.
- Several synchronization techniques:
  - \ref sem_group (binary or counting)
  - \ref mutex_group (mutex) with priority inheritance
  - \ref cond_group
  - \ref rwlock_group
  - \ref mq_group
  - Task \ref gyros_yield "yield", \ref gyros_task_suspend "suspend" and
    \ref gyros_task_resume "resume".
- \ref time_group "Time management" and both relative and absolute time
  \ref sleep_group "sleeping".
- Periodic and one shot \ref timer_group "timers".
- An multiple block size \ref mempool_group "memory pool".

\section supported_hw Supported hardware

ARM based:
- Atmel AT91SAM7S (ARM7TDMI core)
- Luminary Micro Stellaris LM3S (Cortex-M3 core)
- STMicroelectronics STM32 (Cortex-M3 core)
- STMicroelectronics STR91x (ARM966E-S core)
- Cirrus Logic EP93xx (ARM920T core)

\section further_reading Further reading

- \subpage building
- \subpage porting
- \subpage examples

*/
