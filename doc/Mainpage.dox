/**************************************************************************
 * Copyright (c) 2002-2009, Tobias Ringstr√∂m <tobias@ringis.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    - Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
/** \file Mainpage.dox
  * \brief Main page documentation.
  */

/** \mainpage GyrOS

GyrOS is an open source portable real time operating system (RTOS)
with an easy to use C API.  It is easy to port to new platforms,
partly because it is written in C, and partly because the bits that
need to be ported are few and clearly defined.

\section features Features
- Small memory footprint (both code and RAM).
- Easy to \ref porting "port" to new architectures.
- Preemtive multitasking.
- Low power consumption thanks to dynamic timers.
- Debug support to catch common usage errors.
- Permissive BSD-style license allowing for both commercial and
  non-commercial use.
- Synchronization objects:
  - \ref gyros/sem.h "Semaphore" (binary or counting)
  - \ref gyros/mutex.h "Mutex" with priority inheritance
  - \ref gyros/cond.h "Condition variable"
  - \ref gyros/rwlock.h "Read/write lock"
  - Task \ref gyros_task_suspend "suspend" and \ref gyros_task_resume "resume"
- Task iteration.

\section supported_hw Supported hardware

ARM based:
- Atmel AT91SAM7S family
- ST Microelectronics STR91x

\section example Example program

\code
#include <gyros/task.h>

gyros_task_t task1;
char task1_stack[256];

static void
task1_main(void *arg)
{
    ...
}

int
main()
{
    gyros_task_create(&task1, "task1", task1_main, NULL,
                      task1_stack, sizeof(task1_stack), 10);
    gyros_start();
}
\endcode

*/
